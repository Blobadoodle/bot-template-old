import { GatewayIntentBits } from 'discord.js';
const config = {
    admins: [], // Bot admins, level 9, user ids
    support: [], // Bot support, level 8, user ids

    intents: [ GatewayIntentBits.Guilds, GatewayIntentBits.GuildMembers, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent ],
    partials: [],

    defaultSettings: [
        {
            name: 'systemnotice',
            value: 'true',
            prettyName: 'System Notice',
            description: 'Toggle notifying that the user does not have permission to run a command',
            type: 'boolean'
        },
        {
            name: 'modrole',
            value: 'Moderator',
            prettyName: 'Moderator Role',
            description: 'The role used for moderators',
            type: 'role'
        },
        {
            name: 'adminrole',
            value: 'Administrator',
            prettyName: 'Admin Role',
            description: 'The role used for administrators',
            type: 'role'
        },
        {
            name: 'prefix',
            value: '+',
            prettyName: 'Prefix',
            description: 'The prefix used for legacy text commands',
            type: 'string'
        }
    ],

    permLevels: [
        // This is the lowest permission level, this is for users without a role.
        { level: 0,
            name: 'User', 
            guildOnly: false,
            // Don't bother checking, just return true which allows them to execute any command their
            // level allows them to.
            check: () => true
        },
    
        // This is your permission level, the staff levels should always be above the rest of the roles.
        { level: 2,
            // This is the name of the role.
            name: 'Moderator',
            guildOnly: true,
            // The following lines check the guild the message came from for the roles.
            // Then it checks if the member that authored the message has the role.
            // If they do return true, which will allow them to execute the command in question.
            // If they don't then return false, which will prevent them from executing the command.
            check: (message) => {
                try {
                    const modRole = message.guild.roles.cache.find(r => r.name.toLowerCase() === message.settings.modRole.toLowerCase());
                    if(modRole && message.member.roles.cache.has(modRole.id)) return true;
                } catch(e) {
                    return false;
                }
            }
        },
    
        { level: 3,
            name: 'Administrator', 
            guildOnly: true,
            check: (message) => {
                try {
                    const adminRole = message.guild.roles.cache.find(r => r.name.toLowerCase() === message.settings.adminRole.toLowerCase());
                    return (adminRole && message.member.roles.cache.has(adminRole.id));
                } catch(e) {
                    return false;
                }
            }
        },
        // This is the server owner.
        { level: 4,
            name: 'Server Owner',
            guildOnly: true, 
            // Simple check, if the guild owner id matches the message author's ID, then it will return true.
            // Otherwise it will return false.
            check: (message) => {
                const serverOwner = message.author ?? message.user;
                return message.guild?.ownerId === serverOwner.id;
            }
        },
    
        // Bot Support is a special in between level that has the equivalent of server owner access
        // to any server they joins, in order to help troubleshoot the bot on behalf of owners.
        { level: 8,
            name: 'Bot Support',
            guildOnly: false,
            // The check is by reading if an ID is part of this array. Yes, this means you need to
            // change this and reboot the bot to add a support user. Make it better yourself!
            check: (message) => {
                const botSupport = message.author ?? message.user;
                return config.support.includes(botSupport.id);
            }
        },
    
        // Bot Admin has some limited access like rebooting the bot or reloading commands.
        { level: 9,
            name: 'Bot Admin',
            guildOnly: false,
            check: (message) => {
                const botAdmin = message.author ?? message.user;
                return config.admins.includes(botAdmin.id);
            }
        },
    
        // This is the bot owner, this should be the highest permission level available.
        // The reason this should be the highest level is because of dangerous commands such as eval
        // or exec (if the owner has that).
        // Updated to utilize the Teams type from the Application, pulls a list of "Owners" from it.
        { level: 10,
            name: 'Bot Owner', 
            guildOnly: false,
            // Another simple check, compares the message author id to a list of owners found in the bot application.
            check: (message) => {
                const owner = message.author ?? message.user;
                return owner.id === process.env.BOT_OWNER;
            }
        }
    ]
};

export default config;